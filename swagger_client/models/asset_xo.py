# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.29.2-02
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AssetXO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'download_url': 'str',
        'path': 'str',
        'id': 'str',
        'repository': 'str',
        'format': 'str',
        'checksum': 'dict(str, object)',
        'content_type': 'str',
        'last_modified': 'datetime'
    }

    attribute_map = {
        'download_url': 'downloadUrl',
        'path': 'path',
        'id': 'id',
        'repository': 'repository',
        'format': 'format',
        'checksum': 'checksum',
        'content_type': 'contentType',
        'last_modified': 'lastModified'
    }

    def __init__(self, download_url=None, path=None, id=None, repository=None, format=None, checksum=None, content_type=None, last_modified=None, _configuration=None):  # noqa: E501
        """AssetXO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._download_url = None
        self._path = None
        self._id = None
        self._repository = None
        self._format = None
        self._checksum = None
        self._content_type = None
        self._last_modified = None
        self.discriminator = None

        if download_url is not None:
            self.download_url = download_url
        if path is not None:
            self.path = path
        if id is not None:
            self.id = id
        if repository is not None:
            self.repository = repository
        if format is not None:
            self.format = format
        if checksum is not None:
            self.checksum = checksum
        if content_type is not None:
            self.content_type = content_type
        if last_modified is not None:
            self.last_modified = last_modified

    @property
    def download_url(self):
        """Gets the download_url of this AssetXO.  # noqa: E501


        :return: The download_url of this AssetXO.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this AssetXO.


        :param download_url: The download_url of this AssetXO.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def path(self):
        """Gets the path of this AssetXO.  # noqa: E501


        :return: The path of this AssetXO.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AssetXO.


        :param path: The path of this AssetXO.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def id(self):
        """Gets the id of this AssetXO.  # noqa: E501


        :return: The id of this AssetXO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetXO.


        :param id: The id of this AssetXO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def repository(self):
        """Gets the repository of this AssetXO.  # noqa: E501


        :return: The repository of this AssetXO.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this AssetXO.


        :param repository: The repository of this AssetXO.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def format(self):
        """Gets the format of this AssetXO.  # noqa: E501


        :return: The format of this AssetXO.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AssetXO.


        :param format: The format of this AssetXO.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def checksum(self):
        """Gets the checksum of this AssetXO.  # noqa: E501


        :return: The checksum of this AssetXO.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this AssetXO.


        :param checksum: The checksum of this AssetXO.  # noqa: E501
        :type: dict(str, object)
        """

        self._checksum = checksum

    @property
    def content_type(self):
        """Gets the content_type of this AssetXO.  # noqa: E501


        :return: The content_type of this AssetXO.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AssetXO.


        :param content_type: The content_type of this AssetXO.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def last_modified(self):
        """Gets the last_modified of this AssetXO.  # noqa: E501


        :return: The last_modified of this AssetXO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this AssetXO.


        :param last_modified: The last_modified of this AssetXO.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetXO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetXO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetXO):
            return True

        return self.to_dict() != other.to_dict()
