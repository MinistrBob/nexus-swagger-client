# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.29.2-02
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SecurityManagementPrivilegesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_privilege(self, **kwargs):  # noqa: E501
        """Create a wildcard type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeWildcardRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_privilege_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_privilege_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_privilege_with_http_info(self, **kwargs):  # noqa: E501
        """Create a wildcard type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeWildcardRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_privilege" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/wildcard', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_privilege1(self, **kwargs):  # noqa: E501
        """Create an application type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeApplicationRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_privilege1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_privilege1_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_privilege1_with_http_info(self, **kwargs):  # noqa: E501
        """Create an application type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeApplicationRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_privilege1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/application', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_privilege2(self, **kwargs):  # noqa: E501
        """Create a repository content selector type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeRepositoryContentSelectorRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_privilege2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_privilege2_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_privilege2_with_http_info(self, **kwargs):  # noqa: E501
        """Create a repository content selector type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeRepositoryContentSelectorRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_privilege2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/repository-content-selector', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_privilege3(self, **kwargs):  # noqa: E501
        """Create a repository admin type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege3(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeRepositoryAdminRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_privilege3_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_privilege3_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_privilege3_with_http_info(self, **kwargs):  # noqa: E501
        """Create a repository admin type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege3_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeRepositoryAdminRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_privilege3" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/repository-admin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_privilege4(self, **kwargs):  # noqa: E501
        """Create a repository view type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege4(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeRepositoryViewRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_privilege4_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_privilege4_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_privilege4_with_http_info(self, **kwargs):  # noqa: E501
        """Create a repository view type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege4_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeRepositoryViewRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_privilege4" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/repository-view', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_privilege5(self, **kwargs):  # noqa: E501
        """Create a script type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege5(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeScriptRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_privilege5_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_privilege5_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_privilege5_with_http_info(self, **kwargs):  # noqa: E501
        """Create a script type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege5_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiPrivilegeScriptRequest body: The privilege to create.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_privilege5" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/script', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_privilege(self, privilege_id, **kwargs):  # noqa: E501
        """Delete a privilege by id.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_privilege(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_privilege_with_http_info(privilege_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_privilege_with_http_info(privilege_id, **kwargs)  # noqa: E501
            return data

    def delete_privilege_with_http_info(self, privilege_id, **kwargs):  # noqa: E501
        """Delete a privilege by id.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_privilege_with_http_info(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_privilege" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'privilege_id' is set
        if self.api_client.client_side_validation and ('privilege_id' not in params or
                                                       params['privilege_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privilege_id` when calling `delete_privilege`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'privilege_id' in params:
            path_params['privilegeId'] = params['privilege_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/{privilegeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_privilege(self, privilege_id, **kwargs):  # noqa: E501
        """Retrieve a privilege by id.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privilege(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to retrieve. (required)
        :return: ApiPrivilege
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_privilege_with_http_info(privilege_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_privilege_with_http_info(privilege_id, **kwargs)  # noqa: E501
            return data

    def get_privilege_with_http_info(self, privilege_id, **kwargs):  # noqa: E501
        """Retrieve a privilege by id.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privilege_with_http_info(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to retrieve. (required)
        :return: ApiPrivilege
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_privilege" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'privilege_id' is set
        if self.api_client.client_side_validation and ('privilege_id' not in params or
                                                       params['privilege_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privilege_id` when calling `get_privilege`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'privilege_id' in params:
            path_params['privilegeId'] = params['privilege_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/{privilegeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiPrivilege',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_privileges(self, **kwargs):  # noqa: E501
        """Retrieve a list of privileges.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privileges(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiPrivilege]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_privileges_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_privileges_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_privileges_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of privileges.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privileges_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiPrivilege]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_privileges" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiPrivilege]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_privilege(self, privilege_id, **kwargs):  # noqa: E501
        """Update a wildcard type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeWildcardRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_privilege_with_http_info(privilege_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_privilege_with_http_info(privilege_id, **kwargs)  # noqa: E501
            return data

    def update_privilege_with_http_info(self, privilege_id, **kwargs):  # noqa: E501
        """Update a wildcard type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege_with_http_info(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeWildcardRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_privilege" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'privilege_id' is set
        if self.api_client.client_side_validation and ('privilege_id' not in params or
                                                       params['privilege_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privilege_id` when calling `update_privilege`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'privilege_id' in params:
            path_params['privilegeId'] = params['privilege_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/wildcard/{privilegeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_privilege1(self, privilege_id, **kwargs):  # noqa: E501
        """Update an application type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege1(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeApplicationRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_privilege1_with_http_info(privilege_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_privilege1_with_http_info(privilege_id, **kwargs)  # noqa: E501
            return data

    def update_privilege1_with_http_info(self, privilege_id, **kwargs):  # noqa: E501
        """Update an application type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege1_with_http_info(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeApplicationRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_privilege1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'privilege_id' is set
        if self.api_client.client_side_validation and ('privilege_id' not in params or
                                                       params['privilege_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privilege_id` when calling `update_privilege1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'privilege_id' in params:
            path_params['privilegeId'] = params['privilege_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/application/{privilegeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_privilege2(self, privilege_id, **kwargs):  # noqa: E501
        """Update a repository view type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege2(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeRepositoryViewRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_privilege2_with_http_info(privilege_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_privilege2_with_http_info(privilege_id, **kwargs)  # noqa: E501
            return data

    def update_privilege2_with_http_info(self, privilege_id, **kwargs):  # noqa: E501
        """Update a repository view type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege2_with_http_info(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeRepositoryViewRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_privilege2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'privilege_id' is set
        if self.api_client.client_side_validation and ('privilege_id' not in params or
                                                       params['privilege_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privilege_id` when calling `update_privilege2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'privilege_id' in params:
            path_params['privilegeId'] = params['privilege_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/repository-view/{privilegeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_privilege3(self, privilege_id, **kwargs):  # noqa: E501
        """Update a repository content selector type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege3(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeRepositoryContentSelectorRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_privilege3_with_http_info(privilege_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_privilege3_with_http_info(privilege_id, **kwargs)  # noqa: E501
            return data

    def update_privilege3_with_http_info(self, privilege_id, **kwargs):  # noqa: E501
        """Update a repository content selector type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege3_with_http_info(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeRepositoryContentSelectorRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_privilege3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'privilege_id' is set
        if self.api_client.client_side_validation and ('privilege_id' not in params or
                                                       params['privilege_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privilege_id` when calling `update_privilege3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'privilege_id' in params:
            path_params['privilegeId'] = params['privilege_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/repository-content-selector/{privilegeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_privilege4(self, privilege_id, **kwargs):  # noqa: E501
        """Update a repository admin type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege4(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeRepositoryAdminRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_privilege4_with_http_info(privilege_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_privilege4_with_http_info(privilege_id, **kwargs)  # noqa: E501
            return data

    def update_privilege4_with_http_info(self, privilege_id, **kwargs):  # noqa: E501
        """Update a repository admin type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege4_with_http_info(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeRepositoryAdminRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_privilege4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'privilege_id' is set
        if self.api_client.client_side_validation and ('privilege_id' not in params or
                                                       params['privilege_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privilege_id` when calling `update_privilege4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'privilege_id' in params:
            path_params['privilegeId'] = params['privilege_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/repository-admin/{privilegeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_privilege5(self, privilege_id, **kwargs):  # noqa: E501
        """Update a script type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege5(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeScriptRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_privilege5_with_http_info(privilege_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_privilege5_with_http_info(privilege_id, **kwargs)  # noqa: E501
            return data

    def update_privilege5_with_http_info(self, privilege_id, **kwargs):  # noqa: E501
        """Update a script type privilege.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege5_with_http_info(privilege_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str privilege_id: The id of the privilege to update. (required)
        :param ApiPrivilegeScriptRequest body: The privilege to update.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_privilege5" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'privilege_id' is set
        if self.api_client.client_side_validation and ('privilege_id' not in params or
                                                       params['privilege_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privilege_id` when calling `update_privilege5`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'privilege_id' in params:
            path_params['privilegeId'] = params['privilege_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/privileges/script/{privilegeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
